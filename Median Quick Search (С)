#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <math.h>
#include <stdlib.h>
#include <time.h>

int num[1000001];

int partition(int low, int high, int median);
int select(int low, int high, int top);
void swap(int *a, int *b);

int main()
{
	int n, m, i;

	scanf("%d%d", &n, &m);
	for (i = 0; i < n; i++)	
		scanf("%d", &num[i]);
		
	printf("%d\n", select(0, n - 1, m - 1));

	return 0;
}

int select(int low, int high, int top)
{
	if (high - low < 6)
	{
		for (int i = low; i <= high; i++)
		{
			int MIN = i;
			for (int j = i + 1; j <= high; j++)
				if (num[MIN] > num[j])
					MIN = j;
			swap(num +i, num +MIN);
		}
		return num[low + top];
	}

	int groupNum = (high - low - 4) / 5;

	for (int i = 0; i <= groupNum; i++)
	{
		int start = low + 5 * i;
		int end = start + 4;
		for (int j = 0; j < 3; j++)
			for (int k = start; k < end - j; k++)
				if (num[k] > num[k + 1])
					swap(num +k, num + (k + 1));
		swap(num + (low + i), num + (start + 2));
	}

	int median = select(low, low + groupNum, (groupNum + 1) / 2);
	int p = partition(low, high, median);
	int n = p - low;

	if (n == top)
		return num[p];
	if (n > top)
		return select(low, p - 1, top);
	if (n < top)
		return select(p + 1, high, top - n - 1);
}

int partition(int low, int high, int median)
{
	int p;
	for (int i = low; i <= high; i++)
		if (num[i] == median)
		{
			p = i;
			break;
		}
	swap(num + p, num + low);
	int key = num[low];
	while (low < high)
	{
		while (num[high] >= key && low < high)
			high--;
		if (low < high)
			num[low] = num[high];
		while (num[low] <= key && low < high)
			low++;
		if (low < high)
			num[high] = num[low];
	}
	num[low] = key;
	return low;
}

void swap(int* a, int* b)
{
	int temp = *a;
	*a = *b;
	*b = temp;
}
